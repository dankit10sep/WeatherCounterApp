{"ast":null,"code":"// import { createReducer, on } from '@ngrx/store';\n// import * as WeatherActions from './weather.actions';\n// export interface WeatherState {\n//   weatherData: any;\n//   forecastData: any;\n//   loading: boolean;\n//   error: any;\n// }\n// export const initialState: WeatherState = {\n//   weatherData: null,\n//   forecastData: null,\n//   loading: false,\n//   error: null,\n// };\n// export const weatherReducer = createReducer(\n//   initialState,\n//   on(WeatherActions.loadWeather, (state) => ({\n//     ...state,\n//     loading: true\n//   })),\n//   on(WeatherActions.loadWeatherSuccess, (state, { weather }) => ({\n//     ...state,\n//     weatherData: weather,\n//     loading: false\n//   })),\n//   on(WeatherActions.loadWeatherFailure, (state, { error }) => ({\n//     ...state,\n//     error,\n//     loading: false\n//   })),\n//   on(WeatherActions.loadForecast, (state) => ({\n//     ...state,\n//     loading: true\n//   })),\n//   on(WeatherActions.loadForecastSuccess, (state, { forecast }) => ({\n//     ...state,\n//     forecastData: forecast,\n//     loading: false\n//   })),\n//   on(WeatherActions.loadForecastFailure, (state, { error }) => ({\n//     ...state,\n//     error,\n//     loading: false\n//   }))\n// );\nimport { createReducer, on } from '@ngrx/store';\nimport * as WeatherActions from './weather.actions';\nexport const initialState = {\n  cities: [],\n  selectedCity: null,\n  weatherDetails: null\n};\nexport const weatherReducer = createReducer(initialState, on(WeatherActions.addCity, (state, {\n  city\n}) => Object.assign(Object.assign({}, state), {\n  cities: [city, ...state.cities.slice(0, 7)]\n})), on(WeatherActions.deleteCity, (state, {\n  index\n}) => Object.assign(Object.assign({}, state), {\n  cities: state.cities.filter((_, i) => i !== index)\n})), on(WeatherActions.clearCities, state => Object.assign(Object.assign({}, state), {\n  cities: [],\n  selectedCity: null,\n  weatherDetails: null\n})), on(WeatherActions.setSelectedCity, (state, {\n  city\n}) => Object.assign(Object.assign({}, state), {\n  selectedCity: city\n})), on(WeatherActions.updateForecast, (state, {\n  forecast\n}) => Object.assign(Object.assign({}, state), {\n  selectedCity: Object.assign(Object.assign({}, state.selectedCity), {\n    forecast\n  })\n})), on(WeatherActions.loadWeatherDetails, (state, {\n  city,\n  forecast\n}) => Object.assign(Object.assign({}, state), {\n  weatherDetails: {\n    city,\n    forecast\n  }\n})));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}