{"ast":null,"code":"// import { createReducer, on } from '@ngrx/store';\n// import { setCount, increment, decrement, reset } from './counter.actions';\n// export const initialState: number = 0;\n// const _counterReducer = createReducer(\n//     initialState,\n//     on(setCount, (state, { count }) => count),\n//     on(increment, (state) => state + 1),\n//     on(decrement, (state) => (state > 0 ? state - 1 : 0)),\n//     on(reset, () => 0)\n// );\n// export function counterReducer(state: any, action: any) {\n//     return _counterReducer(state, action);\n// }\nimport { createReducer, on } from '@ngrx/store';\nimport { setCount, increment, decrement, reset } from './counter.actions';\nexport const initialState = {\n  counters: []\n};\nconst _counterReducer = createReducer(initialState, on(setCount, (state, {\n  count\n}) => Object.assign(Object.assign({}, state), {\n  counters: new Array(count).fill(0)\n})), on(increment, (state, {\n  index\n}) => {\n  const updatedCounters = [...state.counters];\n  updatedCounters[index]++;\n  return Object.assign(Object.assign({}, state), {\n    counters: updatedCounters\n  });\n}), on(decrement, (state, {\n  index\n}) => {\n  const updatedCounters = [...state.counters];\n  if (updatedCounters[index] > 0) {\n    updatedCounters[index]--;\n  }\n  return Object.assign(Object.assign({}, state), {\n    counters: updatedCounters\n  });\n}), on(reset, () => initialState));\nexport function counterReducer(state, action) {\n  return _counterReducer(state, action);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}